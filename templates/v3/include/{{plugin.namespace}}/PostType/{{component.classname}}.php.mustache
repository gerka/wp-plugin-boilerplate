<?php
/**
 *	@package {{plugin.namespace}}\PostType
 *	@version 1.0.0
 *	2018-09-22
 */

namespace {{plugin.namespace}}\PostType;

if ( ! defined('ABSPATH') ) {
	die('FU!');
}

use {{plugin.namespace}}\Core;

class {{component.classname}} extends PostType {

	/**
	 *	@var string
	 */
	protected $post_type_slug = '{{component.slug}}';

{{#component.flagged.caps}}
	/**
	 *	@var array
	 */
	protected $post_type_caps = array(
		'edit_{{component.slug}}',
		'read_{{component.slug}}',
		'delete_{{component.slug}}',
		'edit_{{component.slug}}s',
		'edit_others_{{component.slug}}s',
		'publish_{{component.slug}}s',
		'read_private_{{component.slug}}s',
	);
{{/component.flagged.caps}}


	/**
	 *	@inheritdoc
	 */
	public function register_post_types( ) {
		// register post type {{component.name}}
		$labels = array(
			'name'                => _x( '{{component.name}}s', 'Post Type General Name', '{{plugin.textdomain}}' ),
			'singular_name'       => _x( '{{component.name}}', 'Post Type Singular Name', '{{plugin.textdomain}}' ),
			'menu_name'           => __( '{{component.name}}', '{{plugin.textdomain}}' ),
			'parent_item_colon'   => __( 'Parent Item:', '{{plugin.textdomain}}' ),
			'all_items'           => __( 'All Items', '{{plugin.textdomain}}' ),
			'view_item'           => __( 'View Item', '{{plugin.textdomain}}' ),
			'add_new_item'        => __( 'Add New Item', '{{plugin.textdomain}}' ),
			'add_new'             => __( 'Add New', '{{plugin.textdomain}}' ),
			'edit_item'           => __( 'Edit Item', '{{plugin.textdomain}}' ),
			'update_item'         => __( 'Update Item', '{{plugin.textdomain}}' ),
			'search_items'        => __( 'Search Item', '{{plugin.textdomain}}' ),
			'not_found'           => __( 'Not found', '{{plugin.textdomain}}' ),
			'not_found_in_trash'  => __( 'Not found in Trash', '{{plugin.textdomain}}' ),
		);

{{#component.flagged.caps}}
		$capabilities = array_combine( array(
			'edit_post',
			'read_post',
			'delete_post',
			'edit_posts',
			'edit_others_posts',
			'publish_posts',
			'read_private_posts',
		), $this->post_type_caps );
{{/component.flagged.caps}}

		$args = array(
			'label'               => __( '{{component.name}}', '{{plugin.textdomain}}' ),
			'description'         => __( '{{component.name}} Description', '{{plugin.textdomain}}' ),
			'labels'              => $labels,
			'supports'            => array( 'title' , 'editor' ),
			'taxonomies'          => array( ),
			'hierarchical'        => false,
			'public'              => true,
			'show_ui'             => true,
			'show_in_menu'        => true,
			'show_in_nav_menus'   => true,
			'show_in_admin_bar'   => true,
			'menu_position'       => 25,
			'can_export'          => true,
			'has_archive'         => true,
			'exclude_from_search' => false,
			'publicly_queryable'  => true,
{{#component.flagged.caps}}
			'capabilities'        => $capabilities,
{{/component.flagged.caps}}
{{^component.flagged.caps}}
			'capability_type'     => 'post',
{{/component.flagged.caps}}

		);
		register_post_type( $this->post_type_slug, $args );
	}

{{#component.flagged.caps}}
	/**
	 *	@inheritdoc
	 */
	public function activate() {
		$this->install_caps();
		return parent::activate();
	}

	/**
	 *	@inheritdoc
	 */
	public static function uninstall() {
		$inst = self::instance();
		$inst->uninstall_caps();
		return parent::uninstall();
	}

{{/component.flagged.caps}}



}
